name: Release WebSQL

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build-web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build web app
        run: npm run build
      
      - name: Upload web build
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: dist/

  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            name: 'macOS'
            rust_targets: 'aarch64-apple-darwin,x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
            name: 'Linux'
            rust_targets: ''
          - platform: 'windows-latest'
            args: ''
            name: 'Windows'
            rust_targets: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_targets }}
      
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev

      - name: Install frontend dependencies
        run: npm ci
      
      - name: Sync versions
        run: npm run version:sync

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}
          updaterJsonKeepUniversal: true

      - name: Create Windows Portable
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "=== Creating Windows Portable Executable ==="
          
          # Create portable directory
          New-Item -ItemType Directory -Force -Path "portable"
          
          # Find the main executable from the build output (not installer)
          $mainExe = Get-ChildItem -Path "src-tauri/target/release" -Filter "*.exe" -Exclude "*setup*", "build", "deps" | 
                     Where-Object { $_.Length -gt 1MB } | 
                     Sort-Object Length -Descending | 
                     Select-Object -First 1
          
          if ($mainExe) {
            Write-Host "Found main executable: $($mainExe.FullName) ($([math]::Round($mainExe.Length / 1MB, 2)) MB)"
            
            # Copy the main executable
            Copy-Item $mainExe.FullName "portable/WebSQL-Portable.exe"
            Write-Host "Created portable executable: portable/WebSQL-Portable.exe"
            
            # Copy required DLLs from the same directory
            $releaseDir = $mainExe.Directory
            $dlls = Get-ChildItem -Path $releaseDir -Filter "*.dll" -ErrorAction SilentlyContinue
            
            foreach ($dll in $dlls) {
              Copy-Item $dll.FullName "portable/"
              Write-Host "Copied DLL: $($dll.Name)"
            }
            
            # Create a simple README for the portable version
            $readmeLines = @(
              "WebSQL Data Compare - Portable Version",
              "",
              "This is a portable version that doesn't require installation.",
              "Simply run WebSQL-Portable.exe to start the application.",
              "",
              "Requirements:",
              "- Windows 10/11",
              "- Microsoft Edge WebView2 Runtime (usually already installed)",
              "",
              "If the application doesn't start, you may need to install WebView2:",
              "https://developer.microsoft.com/en-us/microsoft-edge/webview2/",
              "",
              "Version: Built from $(Get-Date -Format 'yyyy-MM-dd')"
            )
            
            $readmeLines | Out-File -FilePath "portable/README.txt" -Encoding UTF8
            Write-Host "Created README.txt"
            
            # List all files in portable directory
            Write-Host "=== Portable package contents ==="
            Get-ChildItem -Path "portable" | ForEach-Object {
              Write-Host "  $($_.Name) ($([math]::Round($_.Length / 1KB, 2)) KB)"
            }
            
          } else {
            Write-Host "Warning: Could not find main executable"
            Write-Host "=== Available files in release directory ==="
            Get-ChildItem -Path "src-tauri/target/release" -Filter "*.exe" | ForEach-Object {
              Write-Host "  $($_.Name) ($([math]::Round($_.Length / 1KB, 2)) KB)"
            }
          }

      - name: Upload Tauri artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-${{ matrix.name }}
          path: |
            src-tauri/target/release/bundle/
            src-tauri/target/universal-apple-darwin/release/bundle/
            portable/

  release:
    needs: [build-web, build-tauri]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: List all artifacts
        run: |
          echo "=== All artifacts ==="
          find artifacts -type f -name "*.exe" -o -name "*.msi" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" | sort
      
      - name: Create latest.json for updater
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          if [ -z "$VERSION" ] || [ "$VERSION" = "$GITHUB_REF" ]; then
            VERSION="${{ github.event.inputs.version }}"
          fi
          VERSION="${VERSION#v}"
          
          cat > latest.json << EOF
          {
            "version": "$VERSION",
            "pub_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "platforms": {
              "darwin-x86_64": {
                "url": "https://github.com/jjasp/websql/releases/download/v$VERSION/WebSQL.Data.Compare_${VERSION}_x64.dmg",
                "signature": ""
              },
              "darwin-aarch64": {
                "url": "https://github.com/jjasp/websql/releases/download/v$VERSION/WebSQL.Data.Compare_${VERSION}_aarch64.dmg",
                "signature": ""
              },
              "linux-x86_64": {
                "url": "https://github.com/jjasp/websql/releases/download/v$VERSION/web-sql-data-compare_${VERSION}_amd64.AppImage",
                "signature": ""
              },
              "windows-x86_64": {
                "url": "https://github.com/jjasp/websql/releases/download/v$VERSION/WebSQL.Data.Compare_${VERSION}_x64-setup.exe",
                "signature": ""
              }
            }
          }
          EOF
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: WebSQL ${{ github.ref_name }}
          body: |
            # WebSQL Data Compare Tool
            
            ## 📦 Downloads
            
            ### Desktop App
            - **Windows**: 
              - `.msi` installer (recommended)
              - `.exe` NSIS installer  
              - `WebSQL-Portable.exe` - No installation required
            - **macOS**: `.dmg` installer (Universal binary)
            - **Linux**: `.AppImage` (portable) and `.deb` packages
            
            ### Web Version
            - 🌐 [Use WebSQL Online](https://jasperdj.github.io/websql/)
            
            ## ✨ What's New
            - Auto-updater support for desktop app
            - Check for updates in the app menu
            - Windows portable executable (requires WebView2 runtime)
            
            ## 📋 Features
            - Import CSV, Parquet files
            - Write SQL queries with syntax highlighting
            - Export results to CSV
            - Save queries and projects
            - Persistent tables using OPFS
            - Fast DuckDB WASM engine
            
            ---
            *First time using WebSQL? Check out our [Quick Start Guide](https://github.com/jasperdj/websql#quick-start)*
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.exe
            artifacts/**/*.msi
            artifacts/**/README.txt
            latest.json
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
